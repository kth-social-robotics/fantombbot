#!/usr/bin/env python
from fantom_util.feature_extraction.specifications import WORD_EMBEDDINGS, WORD_CLASS_SCORE, SENTIMENT, TOPIC, \
    WORD_CLASS_VECTORS, WORD_CLASSES
from fantom_util.misc import gen_feature_dict
from fantom_util.database import db_session
from fantom_util.database.models import Node, PotentialNodeMerge, Merging
from fantom_util.feature_extraction.feature_extractor import FeatureExtractor
from fantom_util.score_functions import graph_search_score
from sqlalchemy.orm import joinedload
from tqdm import tqdm


def calculate_merges():
    left_nodes = db_session.query(Node) \
        .options(joinedload(Node.utterances), joinedload(Node.node_utterances))\
        .outerjoin(PotentialNodeMerge, PotentialNodeMerge.left_node_id == Node.id) \
        .filter(Node.active.is_(True), Node.parent_id.is_(None), PotentialNodeMerge.id.is_(None)) \
        .all()
    left_node_ids = [x.id for x in left_nodes]

    all_nodes = db_session.query(Node).filter(Node.active.is_(True), Node.parent_id.is_(None)).all()

    merging = db_session.query(Merging.left_node_id, Merging.left_node_id).all()

    features = gen_feature_dict(
        WORD_EMBEDDINGS, WORD_CLASS_VECTORS, WORD_CLASS_SCORE, WORD_CLASSES, SENTIMENT, TOPIC
    )
    fe = FeatureExtractor(features)

    vec_cache = {}

    for left_node in tqdm(left_nodes):
        for right_node in tqdm(all_nodes):
            if left_node.id == right_node.id or (left_node.id, right_node.id) in merging or (right_node.id, left_node.id) in merging:
                continue
            node_score = 0
            for left_utterance in left_node.utterances:
                for right_utterance in right_node.utterances:
                    vec_1 = vec_cache.get(left_utterance)
                    vec_2 = vec_cache.get(right_utterance)

                    if not vec_1:
                        vec_1 = fe({'text': left_utterance.utterance_text})
                        vec_cache[left_utterance] = vec_1

                    if not vec_2:
                        vec_2 = fe({'text': right_utterance.utterance_text})
                        vec_cache[right_utterance] = vec_2
                    score = global_score3(vec_1, vec_2)

                    node_score = max(node_score, score)
            db_session.add(PotentialNodeMerge(left_node_id=left_node.id, right_node_id=right_node.id, score=node_score))
            if right_node.id not in left_node_ids:
                db_session.add(PotentialNodeMerge(left_node_id=right_node.id, right_node_id=left_node.id, score=node_score))
        db_session.commit()


if __name__ == '__main__':
    calculate_merges()
